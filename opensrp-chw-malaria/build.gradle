
plugins {
    id 'jacoco'
    id 'com.android.library'
}

description = 'OpenSRP chw malaria client library'

jacoco {
    toolVersion = "0.8.10"
}

android {
    namespace "org.smartregister.malaria"
    compileSdk androidCompileSdkVersion
    buildToolsVersion androidBuildToolsVersion
    buildFeatures {
        buildConfig true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    defaultConfig {
        minSdkVersion androidMinSdkVersion
        targetSdk androidTargetSdkVersion
        versionCode Integer.parseInt(project.VERSION_CODE)
        versionName project.VERSION_NAME
        multiDexEnabled true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            debuggable true
        }
    }
    lint {
        abortOnError false
    }

    packaging {
        resources {
            excludes += [
                'LICENSE.txt',
                'META-INF/LICENSE',
                'META-INF/LICENSE.txt',
                'META-INF/license.txt',
                'META-INF/NOTICE.txt',
                'META-INF/NOTICE.txt',
                'META-INF/notice.txt',
                'META-INF/ASL2.0'
            ]
        }
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
            all {
                // Mirror sibling libs' JDK17 opens for Robolectric/ReflectionHelpers
                jvmArgs '-Xmx1024m'
                jvmArgs '--add-opens=java.base/java.lang=ALL-UNNAMED'
                jvmArgs '--add-opens=java.base/java.lang.reflect=ALL-UNNAMED'
                jvmArgs '--add-opens=java.base/java.io=ALL-UNNAMED'
                jvmArgs '--add-opens=java.base/java.net=ALL-UNNAMED'
                jvmArgs '--add-opens=java.base/java.util=ALL-UNNAMED'
                jvmArgs '--add-opens=java.base/java.text=ALL-UNNAMED'
                jvmArgs '--add-opens=java.base/java.security=ALL-UNNAMED'
                jvmArgs '--add-opens=java.base/jdk.internal.reflect=ALL-UNNAMED'
                jvmArgs '--add-opens=java.base/jdk.internal.misc=ALL-UNNAMED'
                jvmArgs '--add-opens=java.base/jdk.internal.util=ALL-UNNAMED'
                jvmArgs '--add-opens=java.base/sun.nio.ch=ALL-UNNAMED'
                jvmArgs '--add-opens=java.base/sun.security.util=ALL-UNNAMED'
                jvmArgs '--add-opens=java.desktop/java.awt.font=ALL-UNNAMED'
                jvmArgs '--add-exports=java.base/jdk.internal.reflect=ALL-UNNAMED'
                // --illegal-access was removed in JDK17; drop to avoid noise
                // Align Robolectric repo resolution + enabled SDKs like in core
                systemProperty 'robolectric.dependency.repo.url', 'https://repo1.maven.org/maven2'
                systemProperty 'robolectric.enabledSdks', '28'
            }
        }
    }

}

tasks.withType(Test) {
    // Ensure JaCoCo doesn't try to instrument JDK internal generated classes
    jacoco {
        includeNoLocationClasses = true
        excludes = ['jdk.internal.*']
    }
    // Mirror configurable-views tasks' opens for worker JVMs
    jvmArgs '--add-opens=java.base/java.lang=ALL-UNNAMED'
    jvmArgs '--add-opens=java.base/java.lang.reflect=ALL-UNNAMED'
    jvmArgs '--add-opens=java.base/java.io=ALL-UNNAMED'
    jvmArgs '--add-opens=java.base/jdk.internal.reflect=ALL-UNNAMED'
    jvmArgs '--add-opens=java.base/jdk.internal.misc=ALL-UNNAMED'
    jvmArgs '--add-opens=java.base/jdk.internal.util=ALL-UNNAMED'
    jvmArgs '--add-opens=java.base/sun.nio.ch=ALL-UNNAMED'
    jvmArgs '--add-opens=java.base/sun.security.util=ALL-UNNAMED'
    jvmArgs '--add-opens=java.desktop/java.awt.font=ALL-UNNAMED'
    jvmArgs '--add-exports=java.base/jdk.internal.reflect=ALL-UNNAMED'
    // --illegal-access was removed in JDK17; drop to avoid noise
}

dependencies {
    implementation('io.github.bluecodesystems:opensrp-client-core:6.2.2') {
        transitive = true
    }

    implementation('io.github.bluecodesystems:opensrp-client-native-form-new:3.1.3') {
        transitive = true
    }

    implementation('com.github.BlueCodeSystems:opensrp-client-configurable-views:v2.0.1') {
        transitive = true
    }

    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'androidx.recyclerview:recyclerview:1.3.2'
    implementation 'com.google.android.material:material:1.12.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'de.hdodenhof:circleimageview:3.1.0'
    implementation 'org.apache.commons:commons-lang3:3.12.0'
    implementation 'com.google.code.gson:gson:2.9.0'

    implementation 'com.google.guava:guava:20.0'

    testImplementation 'junit:junit:4.13.2'
    // Align to versions available in local Gradle cache to allow offline test runs
    testImplementation 'org.mockito:mockito-core:4.6.1'
    testImplementation 'org.mockito:mockito-inline:4.6.1'
    testImplementation 'org.robolectric:robolectric:4.10.3'
    testImplementation 'androidx.sqlite:sqlite:2.3.1'
    testImplementation 'net.zetetic:android-database-sqlcipher:4.5.4'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
    androidTestImplementation 'androidx.test:rules:1.5.0'
    // Removed PowerMock; Mockito-inline enables static/final mocking under Java 17
}

task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest']) {
    reports {
        xml.required.set(true)
        html.required.set(true)
        xml.outputLocation.set(file("${buildDir}/reports/jacoco/jacocoRootReport/merged.xml"))
        html.outputLocation.set(file("${buildDir}/reports/jacoco/jacocoRootReport/html"))
    }

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*', '**/*$ViewBinder*.*']
    def debugTree = fileTree(dir: "$project.buildDir/intermediates/javac/debug/classes", excludes: fileFilter)
    def mainSrc = "$project.projectDir/src/main/java"

    sourceDirectories.setFrom(files([mainSrc]))
    classDirectories.setFrom(files([debugTree]))
    executionData.setFrom(fileTree(dir: project.buildDir, includes: [
            'jacoco/testDebugUnitTest.exec', 'outputs/code-coverage/connected/*coverage.ec'
    ]))
}

apply from: '../maven.gradle'
